import sys
import sqlite3
from loguru import logger

from PyQt5 import uic
from PyQt5.QtCore import QSize, QTimer
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtGui import QPixmap, QIcon


class TitlePage(QMainWindow):
    def __init__(self):
        database_name = r"materials\discord.db"
        super().__init__()

        self.database_name = database_name
        self.selected_users = {}  # –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (id: nick)

        self.base_discord = sqlite3.connect(self.database_name)  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
        cur = self.base_discord.cursor()
        self.users_base = cur.execute("SELECT * FROM users").fetchall()  # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

        self.initUI()

    def initUI(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–∑ UI —Ñ–∞–π–ª–∞"""

        uic.loadUi(r'materials\main.ui', self)  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ UI
        pixmap = QPixmap(r'materials\background.jpg')  # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–∞
        self.background.setPixmap(pixmap)

        self.users_all.activated[int].connect(self.add_user)
        self.list_users.itemClicked.connect(self.remove_user)
        self.pb_add_everyone.clicked.connect(self.add_all_users)
        self.pb_remove_everyone.clicked.connect(self.remove_all_users)
        self.pb_info_about_all.clicked.connect(self.get_users_info)
        self.pb_exit.clicked.connect(self.finish)

        self.load_base()

    def load_base(self):
        """–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫"""

        for elem in self.users_base:
            self.users_all.addItem(elem[1], [elem[0]])

    def add_user(self, index: int):
        """–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤"""

        user_id = self.users_all.itemData(index)[0]
        if user_id not in self.selected_users.values():
            item = self.users_all.itemText(index)
            self.selected_users[item] = user_id  # –∑–∞–ø–∏—Å—å –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.list_users.addItem(item)  # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ

    def add_all_users(self):
        """–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤"""

        for i in range(len(self.users_base)):
            user_id = self.users_all.itemData(i)[0]
            if user_id not in self.selected_users.values():
                nick = self.users_all.itemText(i)
                self.list_users.addItem(nick)  # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                self.selected_users[nick] = user_id  # –∑–∞–ø–∏—Å—å –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    def remove_user(self, item):
        """—É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤"""

        del self.selected_users[item.text()]  # —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        self.list_users.takeItem(self.list_users.row(item))

    def remove_all_users(self):
        """—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤"""

        self.list_users.clear()
        self.selected_users.clear()

    def get_users_info(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""

        for user in self.selected_users.items():  # user - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_info = tuple(filter(lambda x: user[1] in x, self.users_base))[0]
            ex1 = UserInfo(self, user_info=user_info, database=self.base_discord)
            ex1.setWindowTitle(user[0])
            ex1.show()

    def finish(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""

        self.base_discord.close()
        logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n")
        app.quit()


class UserInfo(QMainWindow):
    def __init__(self, *args, user_info: list, database):

        super().__init__(*args)
        self.user_info, self.database = user_info, database
        self.xp = self.lvl = self.money = None

        self.is_balance_error = self.is_xp_error = self.is_big_level_error = False
        self.initUI()

    def initUI(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–∑ UI —Ñ–∞–π–ª–∞"""

        uic.loadUi(r'materials\user_info.ui', self)  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ UI
        pixmap = QPixmap(r'materials\widget_bg.jpg')  # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–∞
        self.background.setPixmap(pixmap)
        self.pb_money.setIcon(QIcon(r'materials/fastener.png'))  # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—Å—Ç–µ–∂–∫–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
        self.pb_money.setIconSize(QSize(295, 113))

        self.label_nickname.setText(self.user_info[1])  # –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.label_lvl_now.setText(str(self.user_info[6]))  # —É—Ä–æ–≤–µ–Ω—å —Å–µ–π—á–∞—Å
        self.label_lvl_up.setText(str(self.user_info[6] + 1))  # —É—Ä–æ–≤–µ–Ω—å —Å–µ–π—á–∞—Å + 1
        self.label_lvl_now.setStyleSheet('color: white')
        self.label_lvl_up.setStyleSheet('color: white')
        # —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –¥–∞–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ
        self.progress_xp.setValue(self.get_xp_percent(self.user_info[7])[1])
        self.te_balance.setText(str(self.user_info[3]))  # –±–∞–ª–∞–Ω—Å —Å–µ–π—á–∞—Å
        self.te_xp.setText(str(self.user_info[7]))  # xp —Å–µ–π—á–∞—Å

        self.pb_money.clicked.connect(self.show_balance)  # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ show_balance()
        self.pb_all_commit.clicked.connect(self.save_changes)  # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ show_balance()
        self.te_xp.textChanged.connect(self.set_xp)  # –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ show_balance()
        self.te_balance.textChanged.connect(self.set_balance)  # –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ show_balance()

    def show_balance(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"""

        self.pb_money.hide()  # –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∑–∞—Å—Ç–µ–∂–∫—É (—É–±–∏—Ä–∞–µ—Ç)

    def set_balance(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å"""

        balance = self.te_balance.toPlainText()  # –±–∞–ª–∞–Ω—Å, —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–µ–π—á–∞—Å
        if not balance.isdigit() and balance: # –æ—à–∏–±–∫–∞: –Ω–µ —Ü–∏—Ñ—Ä—ã
            self.label_balance_error.setText('–¶–∏—Ñ–µ—Ä–∫–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôè')
            self.label_balance_error.adjustSize()
            self.label_balance_error.setStyleSheet("background-color: yellow")
            self.is_balance_error = True

        elif len(balance) > 9:  # –æ—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
            self.label_balance_error.setText('–î–∞–∂–µ –≤ –±–∞–Ω–∫–µ —Å—Ç–æ–ª—å–∫–µ –¥–µ–Ω–µ–≥ –Ω–µ—Ç!')
            self.label_balance_error.adjustSize()
            self.label_balance_error.setStyleSheet("background-color: red")
            self.is_balance_error = True

        elif self.is_balance_error:  # –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ - —É–±—Ä–∞—Ç—å
            self.label_balance_error.setText('–¢–µ–ø–µ—Ä—å –≤—Å—ë —Ö–æ—Ä–æ—à–æ!')
            self.label_balance_error.adjustSize()
            self.label_balance_error.setStyleSheet("background-color: lightgreen")
            self.is_balance_error = False
            self.money = balance
            QTimer.singleShot(3000, self.disable_error_balance)  # –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –Ω–∞–¥–ø–∏—Å–∏

        else:
            self.money = balance if balance else 0  # —Å—Ä–∞–∑—É –≤—Å–µ —Ö–æ—Ä–æ—à–æ

    def set_xp(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ xp"""

        xp = self.te_xp.toPlainText()
        # –æ—à–∏–±–∫–∞: —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        if not xp.isdigit() and xp:
            self.label_xp_error.setText('–¶–∏—Ñ–µ—Ä–∫–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôè')
            self.label_xp_error.adjustSize()
            self.label_xp_error.setStyleSheet("background-color: yellow")
            self.is_xp_error = True

        # –æ—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
        elif len(xp) > 12:
            self.label_xp_error.setText('–ù–µ –º–Ω–æ–≥–æ –ª–∏ —Ç—ã —Ö–æ—á–µ—à—å?')
            self.label_xp_error.adjustSize()
            self.label_xp_error.setStyleSheet("background-color: red")
            self.is_xp_error = True

        else:
            # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ—Ç–Ω–æ
            xp = int(xp) if xp else 0
            # —Ä–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è, –ø–æ –≤–≤–µ–¥–µ–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É xp –∏ –æ–ø—Ä–µ–¥–µ–ª–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            new_level, xp_ratio = self.get_xp_percent(xp)
            level_now = int(self.label_lvl_now.text())

            if self.is_xp_error:  # –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ - —É–±—Ä–∞—Ç—å
                self.disable_error_xp()
                self.is_xp_error = False

            if new_level > 99:  # –æ—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —É—Ä–æ–≤–µ–Ω—å
                self.label_xp_error.setText('–£ —Ç–µ–±—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —É—Ä–æ–≤–µ–Ω—å')
                self.label_xp_error.adjustSize()
                self.label_xp_error.setStyleSheet("background-color: cyan")
                self.is_big_level_error = True

                self.label_lvl_now.setText('99')
                self.label_lvl_up.setText('üò®')

                self.progress_xp.setValue(100)

            else:
                if self.is_big_level_error:  # –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ - —É–±—Ä–∞—Ç—å
                    self.disable_error_xp()
                    self.is_big_level_error = False

                # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è lvl –∏ xp
                self.label_lvl_now.setText(str(new_level))
                self.label_lvl_up.setText(str(new_level + 1))
                self.progress_xp.setValue(xp_ratio)
                # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π lvl –∏ xp
                self.xp = xp
                self.lvl = new_level

    def disable_error_balance(self):
        """–ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ '–ë–∞–ª–∞–Ω—Å'"""

        if not self.is_balance_error:
            self.label_balance_error.setText('')
            self.label_balance_error.setStyleSheet("background-color: none")

    def get_xp_percent(self, xp: int) -> tuple:
        """–í–æ–∑—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–∞ —Ç–µ–∫—É—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ xp –∏
         –æ—Ç–Ω–æ—à–µ–Ω–∏–µ xp –∫ xp –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–≤–Ω–µ"""

        level_now = int(xp ** (1 / 4))  # —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ xp
        xp_ratio = (xp - level_now ** 4) / ((level_now + 1) ** 4 - level_now ** 4)
        return level_now, int(xp_ratio * 100)

    def disable_error_xp(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏"""

        self.label_xp_error.setText('–¢–µ–ø–µ—Ä—å –≤—Å—ë —Ö–æ—Ä–æ—à–æ!')
        self.label_xp_error.adjustSize()
        self.label_xp_error.setStyleSheet("background-color: lightgreen")
        QTimer.singleShot(3000, self.hide_error_xp)

    def hide_error_xp(self):
        """–ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ 'xp'"""

        if not self.is_xp_error and not self.is_big_level_error:
            self.label_xp_error.setText('')
            self.label_xp_error.setStyleSheet("background-color: none")

    def save_changes(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""

        cur = self.database.cursor()

        # –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∏ xp
        if self.xp and not self.is_big_level_error and not self.is_xp_error:

            # –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ logs
            xp_before, lvl_before = tuple(cur.execute(f"""SELECT xp, lvl from users
                                                        WHERE id={self.user_info[0]}""").fetchone())
            logger.info(f"{self.user_info[1]}\tXP\t{'{'}{xp_before}{'}'}\t‚Äî\t{'{'}{self.xp}{'}'}")
            logger.info(f"{self.user_info[1]}\tLVL\t{'{'}{lvl_before}{'}'}\t‚Äî\t{'{'}{self.lvl}{'}'}")

            # –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cur.execute(f"""UPDATE users
                            SET xp = {self.xp},
                                lvl = {self.lvl}
                            WHERE id={self.user_info[0]}""")

        # –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å—è
        if self.money and not self.is_balance_error:

            # –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ logs
            balance_before = cur.execute(f"""SELECT money from users
                                            WHERE id={self.user_info[0]}""").fetchone()[0]
            logger.info(f"{self.user_info[1]}\t–ë–∞–ª–∞–Ω—Å:\t{'{'}{balance_before}{'}'}\t‚Äî\t{'{'}{self.money}{'}'}")

            # –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cur.execute(f"""UPDATE users
                            SET money = {self.money}
                            WHERE id={self.user_info[0]}""")
        self.database.commit()  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–¥


BASE_NAME = r"materials\discord.db"

if __name__ == '__main__':
    logger.add("debug.log", format="{time} {level} {message}", level="INFO",
               rotation="10 KB", compression="zip", encoding="utf-8")

    app = QApplication(sys.argv)
    ex = TitlePage()
    ex.show()
    ex.setWindowTitle("Discord")
    sys.exit(app.exec())
